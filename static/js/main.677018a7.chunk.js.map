{"version":3,"sources":["actions/types.js","actions/index.js","components/CommentBox.js","components/CommentList.js","components/App.js","reducers/comments.js","reducers/index.js","index.js","components/Root.js"],"names":["SAVE_COMMENT","FETCH_COMMENTS","saveComment","text","type","payload","fetchComments","res","axios","get","CommentBox","state","textInput","onInputChange","e","_this","setState","target","value","onFormSubmit","trim","preventDefault","props","onFetchClick","react_default","a","createElement","onSubmit","this","id","onChange","rows","cols","placeholder","onClick","React","Component","connect","actions","key","CommentList","renderCommentList","comments","map","comment","App","components_CommentBox","components_CommentList","commentsReducer","arguments","length","undefined","action","concat","Object","toConsumableArray","data","body","combineReducers","ReactDOM","render","store","createStore","reducers","initialState","applyMiddleware","reduxPromise","es","children","components_App","document","getElementById"],"mappings":"yTAAaA,EAAe,eACfC,EAAiB,kCCEjBC,EAAc,SAACC,GACxB,MAAO,CACHC,KAAMJ,EACNK,QAASF,IAIJG,EAAgB,WACzB,IAAMC,EAAMC,IAAMC,IAAI,gDAEtB,MAAO,CACHL,KAAMH,EACNI,QAASE,ICXXG,6MAEFC,MAAQ,CACJC,UAAW,MAGfC,cAAgB,SAACC,GACbC,EAAKC,SAAS,CAAEJ,UAAWE,EAAEG,OAAOC,WAGxCC,aAAe,SAACL,GACPC,EAAKJ,MAAMC,UAAUQ,SAC1BN,EAAEO,iBAEFN,EAAKO,MAAMpB,YAAYa,EAAKJ,MAAMC,WAElCG,EAAKC,SAAS,CAAEJ,UAAW,SAG/BW,aAAe,WAEXR,EAAKO,MAAMhB,yFAIX,OACIkB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAKT,cAArB,uBAEIK,EAAAC,EAAAC,cAAA,YAAUG,GAAG,eAAeX,MAAOU,KAAKjB,MAAMC,UAAWkB,SAAUF,KAAKf,cAAekB,KAAK,IAAIC,KAAK,KAAKC,YAAY,oBACtHT,EAAAC,EAAAC,cAAA,UAAQG,GAAG,aAAX,WAEJL,EAAAC,EAAAC,cAAA,UAAQG,GAAG,WAAWK,QAASN,KAAKL,cAApC,0BAhCSY,IAAMC,WAsChBC,cAAQ,KAAMC,EAAdD,CAAuB3B,GCvClC6B,EAAM,EAEJC,6MAEFC,kBAAoB,WAChB,OAAO1B,EAAKO,MAAMoB,SAASC,IAAI,SAAAC,GAAO,OAAIpB,EAAAC,EAAAC,cAAA,MAAIa,IAAKA,KAAQK,8EAI3D,OACIpB,EAAAC,EAAAC,cAAA,mCAEKE,KAAKa,4BAVIN,IAAMC,WAsBjBC,cANS,SAAC1B,GACrB,MAAO,CACH+B,SAAU/B,EAAM+B,WAITL,CAAyBG,GCXzBK,mLAVP,OACIrB,EAAAC,EAAAC,cAAA,2BAEIF,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAD,cANEZ,IAAMC,2CCUTY,MAZf,WAAkD,IAAzBrC,EAAyBsC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB,GAAIG,EAAaH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAC1C,OAAQG,EAAOhD,MACX,KAAKJ,EACD,SAAAqD,OAAAC,OAAAC,EAAA,EAAAD,CAAW3C,GAAX,CAAkByC,EAAO/C,UAC7B,KAAKJ,EACD,IAAMyC,EAAWU,EAAO/C,QAAQmD,KAAKb,IAAI,SAAAC,GAAO,OAAIA,EAAQa,OAC5D,SAAAJ,OAAAC,OAAAC,EAAA,EAAAD,CAAW3C,GAAX2C,OAAAC,EAAA,EAAAD,CAAqBZ,IACzB,QACI,OAAO/B,ICPJ+C,cAAgB,CAC3BhB,SAAUM,ICCdW,IAASC,OACLpC,EAAAC,EAAAC,cCAW,SAACJ,GACZ,IAAMuC,EAAQC,YACVC,EACAzC,EAAM0C,aACNC,YAAgBC,MAEpB,OACI1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAUN,MAAOA,GACZvC,EAAM8C,WDRf,KACI5C,EAAAC,EAAAC,cAAC2C,EAAD,OAEJC,SAASC,eAAe","file":"static/js/main.677018a7.chunk.js","sourcesContent":["export const SAVE_COMMENT = 'SAVE_COMMENT';\r\nexport const FETCH_COMMENTS = 'FETCH_COMMENTS';","import { SAVE_COMMENT, FETCH_COMMENTS } from 'actions/types';\r\nimport axios from 'axios';\r\n\r\nexport const saveComment = (text) => {\r\n    return {\r\n        type: SAVE_COMMENT,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const fetchComments = () => {\r\n    const res = axios.get('http://jsonplaceholder.typicode.com/comments');\r\n\r\n    return {\r\n        type: FETCH_COMMENTS,\r\n        payload: res\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from 'actions';\r\n\r\nclass CommentBox extends React.Component {\r\n\r\n    state = {\r\n        textInput: \"\",\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({ textInput: e.target.value });\r\n    }\r\n    \r\n    onFormSubmit = (e) => {\r\n        if (!this.state.textInput.trim()) return;\r\n        e.preventDefault();\r\n        // send an action to redux, and make changes to the global state\r\n        this.props.saveComment(this.state.textInput);\r\n        // empty text Input after successfully updating state\r\n        this.setState({ textInput: '' }) \r\n    }\r\n\r\n    onFetchClick = () => {\r\n        // dispatch FETCH action\r\n        this.props.fetchComments();\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.onFormSubmit}>\r\n                    CommentBox Component\r\n                    <textarea id=\"commentInput\" value={this.state.textInput} onChange={this.onInputChange} rows=\"3\" cols=\"30\" placeholder=\"Enter a comment\"/>\r\n                    <button id=\"submitBtn\">Submit</button>\r\n                </form>\r\n                <button id=\"fetchBtn\" onClick={this.onFetchClick}>Fetch Comments</button>\r\n            </div>\r\n        );\r\n    }\r\n} \r\n\r\nexport default connect(null, actions)(CommentBox);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nlet key = 0;\r\n\r\nclass CommentList extends React.Component {\r\n\r\n    renderCommentList = () => {\r\n        return this.props.comments.map(comment => <li key={key++}>{comment}</li>)\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                CommentList Component\r\n                {this.renderCommentList()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        comments: state.comments\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CommentList);","import React from 'react';\r\nimport CommentBox from 'components/CommentBox';\r\nimport CommentList from 'components/CommentList';\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                App Component\r\n                <CommentBox />\r\n                <CommentList />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import { SAVE_COMMENT, FETCH_COMMENTS } from 'actions/types';\r\n\r\nfunction commentsReducer(state = [], action = {}) {\r\n    switch (action.type) {\r\n        case SAVE_COMMENT:\r\n            return [...state, action.payload];\r\n        case FETCH_COMMENTS:\r\n            const comments = action.payload.data.map(comment => comment.body);\r\n            return [...state, ...comments];\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default commentsReducer;","import { combineReducers } from 'redux';\r\nimport commentsReducer from 'reducers/comments';\r\n\r\nexport default combineReducers({\r\n    comments: commentsReducer\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from 'components/App';\r\nimport Root from 'components/Root';\r\n\r\nReactDOM.render(\r\n    <Root>\r\n        <App /> \r\n    </Root>,\r\n    document.getElementById('root'));","import React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport reduxPromise from 'redux-promise';\r\nimport reducers from 'reducers';\r\n\r\nexport default (props) => {\r\n    const store = createStore(\r\n        reducers, \r\n        props.initialState, \r\n        applyMiddleware(reduxPromise)\r\n    );\r\n    return (\r\n        <Provider store={store}>\r\n            {props.children}\r\n        </Provider>\r\n    )\r\n}"],"sourceRoot":""}